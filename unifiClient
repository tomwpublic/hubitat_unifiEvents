/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.0.6 - tomw - Add "Refresh interval" option to work around recent UniFi controller reliability issues
1.0.0 - tomw - Initial release

*/

metadata
{
    definition(name: "UniFi Client", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Initialize"
        capability "PresenceSensor"
        capability "Refresh"
        
        attribute "accessPoint", "string"
    }
}

preferences
{
    section
    {
        input "clientMAC", "text", title: "Device MAC", required: true
    }
    section
    {
        input "refreshInterval", "number", title: "Refresh interval in seconds (enter 0 to disable polling)", defaultValue: 60
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def updated()
{
    configure()
}

def configure()
{
    state.clear()
    initialize()
}

def initialize()
{
    sendEvent(name: "presence", value: "unknown")
    sendEvent(name: "accessPoint", value: "unknown")
    
    refresh()
}

def refresh()
{
    unschedule(refresh)
    
    parent.refreshFromChild(device.getSetting("clientMAC"))
    
    if(refreshInterval && 0 != refreshInterval)
    {        
        runIn(refreshInterval, refresh)
    }
}

def setupFromParent(clientDetails)
{
    if(clientDetails)
    {
        device.updateSetting("clientMAC", clientDetails?.mac)
        device.updateSetting("refreshInterval", 60)
        
        updated()
    }
}

def refreshFromParent(clientDetails)
{
    logDebug("refreshFromParent(${clientDetails})")
    
    switch(clientDetails?.presence)
    {
        case "present":
            sendEvent(name: "presence", value: "present")
            break
        case "not present":
            sendEvent(name: "presence", value: "not present")
            break
        default:
            logDebug("no presence details found")
            break
    }
    
    sendEvent(name: "accessPoint", value: (clientDetails?.ap ?: "unknown"))
}
