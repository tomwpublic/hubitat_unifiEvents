/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.0.10 - tomw - Support re-using child device (through updating Device MAC setting) if physical device changes
1.0.9  - tomw - Removed redundant refresh scheduling
1.0.7  - tomw - Add MAC-based device commands.  Add on/off to client devices for blocking access to network.
1.0.6  - tomw - Add "Refresh interval" option to work around recent UniFi controller reliability issues
1.0.0  - tomw - Initial release

*/

metadata
{
    definition(name: "UniFi Client", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "PresenceSensor"
        capability "Refresh"
        capability "Switch"
        
        command "on", [[name: "allow network connection", type:"BOOL", description:"allow network connection"]]
        command "off", [[name: "disallow network connection", type:"BOOL", description:"disallow network connection"]]   
        
        attribute "accessPoint", "string"
    }
}

preferences
{
    section
    {
        input "clientMAC", "text", title: "Device MAC", required: true
    }
    section
    {
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def updated()
{
    device.setDeviceNetworkId(parent?.childDni(clientMAC))
    configure()    
}

def configure()
{
    state.clear()
    refresh()
}

def refresh()
{
    parent.refreshFromChild(device.getSetting("clientMAC"))
}

def setupFromParent(clientDetails)
{
    if(clientDetails)
    {
        device.setDeviceNetworkId(parent?.childDni(clientDetails?.mac))
        device.updateSetting("clientMAC", clientDetails?.mac)
        
        refresh()
    }
}

def refreshFromParent(clientDetails)
{
    logDebug("refreshFromParent(${clientDetails})")
    
    sendEvent(name: "presence", value: clientDetails?.presence ?: "unknown")
    sendEvent(name: "accessPoint", value: (clientDetails?.ap ?: "unknown"))
    
    if(clientDetails?.switch)
    {
        sendEvent(name: "switch", value: clientDetails.switch)
    }
}

def allowDevice(allow)
{
    def cmd = allow ? "unblock-sta" : "block-sta"
    def mac = device.getSetting("clientMAC")
    
    if(parent.writeDeviceMacCmd(mac, cmd))
    {
        sendEvent(name: "switch", value: allow ? "on" : "off")
    }
    else
    {
        logDebug("allowDevice failed for client: ${mac}")
    }
}

def on()
{
    allowDevice(true)
}

def off()
{
    allowDevice(false)
}
